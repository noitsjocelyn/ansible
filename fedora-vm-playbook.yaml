- name: Configure unRAID VMs which use Fedora
  hosts: fedora_vms
  remote_user: "{{ admin_username }}"
  vars:
    ansible_common_remote_group: wheel

  tasks:
    - name: Admin tasks
      become: true
      block:
        # Initial setup
        - name: Upgrade all packages
          # noqa package-latest
          ansible.builtin.dnf:
            name: "*"
            state: latest
        - name: Install packages
          # noqa package-latest
          ansible.builtin.dnf:
            name:
              # For Ansible
              - python3-firewall
              # Core packages
              - bzip2-devel
              - distribution-gpg-keys
              - glibc-all-langpacks
              - libffi-devel
              - sqlite-devel
              # Other packages
              - direnv
              - emacs
              - et
              - git
              - jq
              - kitty-terminfo
              - mkvtoolnix
              - mosh
              - prename
              - ripgrep
              - tmux
              - vim
              - zsh
            state: latest
        - name: Get Fedora version
          register: fedora_version
          changed_when: false
          # noqa command-instead-of-module
          ansible.builtin.shell:
            executable: /bin/zsh
            cmd: rpm -E %fedora
        - name: Import RPM Fusion Free GPG key
          ansible.builtin.rpm_key:
            key: /usr/share/distribution-gpg-keys/rpmfusion/RPM-GPG-KEY-rpmfusion-free-fedora-{{ fedora_version.stdout }}
            fingerprint: E9A4 91A3 DE24 7814 E7E0 67EA E06F 8ECD D651 FF2E
        - name: Import RPM Fusion Nonfree GPG key
          ansible.builtin.rpm_key:
            key: /usr/share/distribution-gpg-keys/rpmfusion/RPM-GPG-KEY-rpmfusion-nonfree-fedora-{{ fedora_version.stdout }}
            fingerprint: 79BD B88F 9BBF 7391 0FD4 095B 6A2A F961 9484 3C65
        - name: Enable RPM Fusion
          # noqa package-latest
          ansible.builtin.dnf:
            name:
              - https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-{{ fedora_version.stdout }}.noarch.rpm
              - https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-{{ fedora_version.stdout }}.noarch.rpm
            state: latest
        - name: Enable openh264
          changed_when: false
          ansible.builtin.shell:
            executable: /bin/zsh
            cmd: dnf config-manager setopt fedora-cisco-openh264.enabled=1
        - name: Install ffmpeg
          # noqa package-latest
          ansible.builtin.dnf:
            name:
              - ffmpeg
              - ffmpeg-devel
            state: latest
            allowerasing: true
        - name: Setup preserve env for sudoers
          ansible.builtin.copy:
            dest: "/etc/sudoers.d/01_preserve_env"
            content: |
              Defaults env_keep += "PATH"
            force: false
            mode: "0644"
        - name: Check for en_US UTF-8 locale
          register: locale_status
          changed_when: false
          ansible.builtin.command:
            cmd: localectl status
        - name: Set locale
          when: ('LANG=en_US.UTF-8' not in locale_status.stdout)
          changed_when: true
          ansible.builtin.command:
            cmd: localectl set-locale en_US.UTF-8
        - name: Use zsh as default shell for admin user
          become: true
          ansible.builtin.user:
            name: "{{ admin_username }}"
            shell: /bin/zsh
        - name: Add authorized key for admin user
          ansible.posix.authorized_key:
            user: "{{ admin_username }}"
            key: "{{ lookup('file', admin_ssh_pub_key_file) }}"

        # Mount unRAID shares
        - name: "Create share: /mnt/{{ item }}"
          loop: "{{ unraid_shares }}"
          ansible.builtin.file:
            path: "/mnt/{{ item }}"
            state: directory
            mode: '0755'
        - name: "Mount share: {{ item }}"
          loop: "{{ unraid_shares }}"
          ansible.posix.mount:
            path: "/mnt/{{ item }}"
            src: "{{ item }}"
            fstype: 9p
            state: mounted
            opts: relatime,rw

        # Eternal Terminal setup
        - name: Enable Eternal Terminal
          ansible.builtin.systemd_service:
            name: et
            enabled: true
            state: started
        - name: Enable et service port, permanently and immediately if possible
          ansible.posix.firewalld:
            service: et
            state: enabled
            permanent: true
            immediate: true

        # Mosh setup (doesn't use a systemd service)
        - name: Enable mosh service ports, permanently and immediately if possible
          ansible.posix.firewalld:
            service: mosh
            state: enabled
            permanent: true
            immediate: true

        # Install and update yt-dlp
        - name: Download and install yt-dlp
          ansible.builtin.get_url:
            url: https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp
            dest: /usr/local/bin
            mode: a+rx
        - name: Update yt-dlp
          register: yt_dlp_update
          changed_when: ('Updated yt-dlp to' in yt_dlp_update.stdout)
          ansible.builtin.shell:
            executable: /bin/zsh
            cmd: |
              yt-dlp --update

        # Install asdf
        - name: Get asdf .release-please-manifest.json
          ansible.builtin.uri:
            url: https://raw.githubusercontent.com/asdf-vm/asdf/refs/heads/master/.release-please-manifest.json
            return_content: true
          register: asdf_release_please_manifest
        - name: Extract asdf version from manifest
          ansible.builtin.set_fact:
            asdf_version: "v{{ asdf_release_please_manifest.content | regex_search('([0-9]+\\.)?([0-9]+\\.)?([0-9]+)') }}"
        - name: Download and install asdf
          ansible.builtin.unarchive:
            src: https://github.com/asdf-vm/asdf/releases/download/{{ asdf_version }}/asdf-{{ asdf_version }}-linux-amd64.tar.gz
            dest: /usr/local/bin
            remote_src: true

        # Create unraid users
        - name: Get name of group with same GID as unRAID nobody group
          register: local_name_unraid_users_group
          changed_when: false
          ansible.builtin.shell:
            executable: /bin/zsh
            cmd: |
              set -o pipefail
              getent group {{ unraid_users_gid }} | cut -d: -f1
        - name: Add the unRAID user
          ansible.builtin.user:
            name: "{{ unraid_username }}"
            comment: unRAID
            create_home: true
            shell: /bin/zsh
            uid: "{{ unraid_nobody_uid }}"
            group: "{{ local_name_unraid_users_group.stdout }}"
            groups: "{{ local_name_unraid_users_group.stdout }},wheel"
        - name: Add authorized key to unRAID user
          ansible.posix.authorized_key:
            user: "{{ unraid_username }}"
            key: "{{ lookup('file', unraid_ssh_pub_key_file) }}"

    - name: unRAID user setup # noqa name[casing]
      become: true
      become_user: "{{ unraid_username }}"
      block:
        - name: Oh-My-Zsh setup
          when: setup_omz
          block:
            - name: Check for Oh-My-Zsh
              ignore_errors: true
              register: omz_installed
              changed_when: false
              ansible.builtin.shell:
                executable: /bin/zsh
                cmd: |
                  . ~/.zshrc
                  command -v omz
            - name: Install OMZ
              when: omz_installed.rc != 0
              ansible.builtin.shell:
                executable: /bin/zsh
                cmd: |
                  export CHSH="no"
                  export RUNZSH="no"
                  sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
                creates: ~/.oh-my-zsh
            - name: Download zsh-autocomplete plugin
              # noqa latest[git]
              ansible.builtin.git:
                repo: https://github.com/zsh-users/zsh-autosuggestions
                dest: ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions
            - name: Get enabled OMZ plugins
              register: omz_plugins
              changed_when: false
              ansible.builtin.shell:
                executable: /bin/zsh
                cmd: |
                  . ~/.zshrc
                  echo ${plugins}

            # OMZ plugin setup
            - name: Enable OMZ git plugin
              when: ('git' not in omz_plugins.stdout)
              register: omz_git_enable
              changed_when: omz_git_enable.rc == 0
              ansible.builtin.shell:
                executable: /bin/zsh
                cmd: |
                  . ~/.zshrc
                  omz plugin enable git
            - name: Enable OMZ direnv plugin
              when: ('direnv' not in omz_plugins.stdout)
              register: omz_direnv_enable
              changed_when: omz_direnv_enable.rc == 0
              ansible.builtin.shell:
                executable: /bin/zsh
                cmd: |
                  . ~/.zshrc
                  omz plugin enable direnv
            - name: Enable OMZ zsh-autosuggestions plugin
              when: ('zsh-autosuggestions' not in omz_plugins.stdout)
              register: omz_autosuggestions_enable
              changed_when: omz_autosuggestions_enable.rc == 0
              ansible.builtin.shell:
                executable: /bin/zsh
                cmd: |
                  . ~/.zshrc
                  omz plugin enable zsh-autosuggestions

        # asdf setup
        - name: Check for asdf shims in $PATH
          register: asdf_path_config
          changed_when: false
          ignore_errors: true
          ansible.builtin.shell:
            executable: /bin/zsh
            cmd: |
              set -o pipefail
              cat ~/.zshrc | grep 'export PATH=.*\.asdf.*shims'
        - name: Configure asdf
          when: asdf_path_config.rc != 0 or asdf_path_config.stdout == ""
          changed_when: true
          ansible.builtin.shell:
            executable: /bin/zsh
            cmd: |
              echo 'export PATH="${ASDF_DATA_DIR:-$HOME/.asdf}/shims:$PATH"' >> "${HOME}/.zshrc"
              # Enable legacy version files, like .nvmrc. https://asdf-vm.com/manage/configuration.html#legacy-version-file
              echo "legacy_version_file = yes" >> "${HOME}/.asdfrc"
        - name: Check installed asdf plugins
          register: asdf_plugin_list
          changed_when: false
          ansible.builtin.shell:
            executable: /bin/zsh
            cmd: asdf plugin list
        - name: Setup asdf Python plugin
          when: ('python' not in asdf_plugin_list.stdout)
          changed_when: true
          ansible.builtin.shell:
            executable: /bin/zsh
            cmd: asdf plugin add python
        - name: Setup asdf NodeJS plugin
          when: ('nodejs' not in asdf_plugin_list.stdout)
          changed_when: true
          ansible.builtin.shell:
            executable: /bin/zsh
            cmd: asdf plugin add nodejs

        # Git setup
        - name: Check for Git aliases
          register: git_config
          changed_when: false
          # noqa command-instead-of-module
          ansible.builtin.command:
            cmd: git config --list
        - name: Setup Git aliases
          when: |
            ('alias.co' not in git_config.stdout)
            or ('alias.br' not in git_config.stdout)
            or ('alias.ci' not in git_config.stdout)
            or ('alias.st' not in git_config.stdout)
          changed_when: true
          # noqa command-instead-of-module
          ansible.builtin.shell:
            cmd: |
              git config --global alias.co checkout
              git config --global alias.br branch
              git config --global alias.ci commit
              git config --global alias.st status
